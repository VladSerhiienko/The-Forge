/*
 * Copyright (c) 2018 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/



cbuffer cbCamera : register(b0) {
	float4x4 projView;
	float3 camPos;
}

cbuffer cbObject : register(b1) {
	float4x4 worldMat;
	float roughness;
	float metalness;
}


Texture2D<float4> srcTexture : register(t0);
RWStructuredBuffer<float4> dstBuffer : register(u1);
SamplerState skyboxSampler : register(s2);


[numthreads(16,16,1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
	float PI = 3.14159265359;
	float2 invAtan = float2(0.1591f, 0.3183f);
	uint nMips = 11;
	uint maxSize = 1024;

	float3 threadPos = DTid;
	uint pixelOffset = 0;
	for (uint mip = 0; mip < nMips; mip++)
	{
		uint mipSize = maxSize >> mip;
		if (threadPos.x >= mipSize || threadPos.y >= mipSize) return;

		float2 texcoords = float2(float(threadPos.x + 0.5) / mipSize, 1.0f - float(threadPos.y + 0.5) / mipSize);
		float3 sphereDir;
		if (threadPos.z <= 0) {
			sphereDir = normalize(float3(0.5, -(texcoords.y - 0.5), -(texcoords.x - 0.5)));
		}
		else if (threadPos.z <= 1) {
			sphereDir = normalize(float3(-0.5, -(texcoords.y - 0.5), texcoords.x - 0.5));
		}
		else if (threadPos.z <= 2) {
			sphereDir = normalize(float3(texcoords.x - 0.5, -0.5, -(texcoords.y - 0.5)));
		}
		else if (threadPos.z <= 3) {
			sphereDir = normalize(float3(texcoords.x - 0.5, 0.5, texcoords.y - 0.5));
		}
		else if (threadPos.z <= 4) {
			sphereDir = normalize(float3(texcoords.x - 0.5, -(texcoords.y - 0.5), 0.5));
		}
		else if (threadPos.z <= 5) {
			sphereDir = normalize(float3(-(texcoords.x - 0.5), -(texcoords.y - 0.5), -0.5));
		}

		float2 panoUVs = float2(atan2(sphereDir.z, sphereDir.x), asin(sphereDir.y));
		panoUVs *= invAtan;
		panoUVs += 0.5f;

		// We need to use SampleLevel, since compute shaders do not support regular sampling 
		float4 outColor = srcTexture.SampleLevel(skyboxSampler, panoUVs, 0);

		pixelOffset += threadPos.z * mipSize * mipSize;
		uint pixelId = pixelOffset + threadPos.y * mipSize + threadPos.x;
		dstBuffer[pixelId] = outColor;
		pixelOffset += (6 - threadPos.z) * mipSize * mipSize;
	}
}
